{"ast":null,"code":"const timeStep = 10;\nconst maxDuration = 10000;\nfunction pregenerateKeyframes(generator) {\n  let overshootDuration = undefined;\n  let timestamp = timeStep;\n  let state = generator(0);\n  const keyframes = [state.current];\n  while (!state.done && timestamp < maxDuration) {\n    state = generator(timestamp);\n    keyframes.push(state.done ? state.target : state.current);\n    if (overshootDuration === undefined && state.hasReachedTarget) {\n      overshootDuration = timestamp;\n    }\n    timestamp += timeStep;\n  }\n  const duration = timestamp - timeStep;\n  /**\n   * If generating an animation that didn't actually move,\n   * generate a second keyframe so we have an origin and target.\n   */\n  if (keyframes.length === 1) keyframes.push(state.current);\n  return {\n    keyframes,\n    duration: duration / 1000,\n    overshootDuration: (overshootDuration !== null && overshootDuration !== void 0 ? overshootDuration : duration) / 1000\n  };\n}\nexport { pregenerateKeyframes };","map":{"version":3,"names":["timeStep","maxDuration","pregenerateKeyframes","generator","overshootDuration","undefined","timestamp","state","keyframes","current","done","push","target","hasReachedTarget","duration","length"],"sources":["C:/Users/shard/Portfolio/node_modules/@motionone/generators/dist/utils/pregenerate-keyframes.es.js"],"sourcesContent":["const timeStep = 10;\nconst maxDuration = 10000;\nfunction pregenerateKeyframes(generator) {\n    let overshootDuration = undefined;\n    let timestamp = timeStep;\n    let state = generator(0);\n    const keyframes = [state.current];\n    while (!state.done && timestamp < maxDuration) {\n        state = generator(timestamp);\n        keyframes.push(state.done ? state.target : state.current);\n        if (overshootDuration === undefined && state.hasReachedTarget) {\n            overshootDuration = timestamp;\n        }\n        timestamp += timeStep;\n    }\n    const duration = timestamp - timeStep;\n    /**\n     * If generating an animation that didn't actually move,\n     * generate a second keyframe so we have an origin and target.\n     */\n    if (keyframes.length === 1)\n        keyframes.push(state.current);\n    return {\n        keyframes,\n        duration: duration / 1000,\n        overshootDuration: (overshootDuration !== null && overshootDuration !== void 0 ? overshootDuration : duration) / 1000,\n    };\n}\n\nexport { pregenerateKeyframes };\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,EAAE;AACnB,MAAMC,WAAW,GAAG,KAAK;AACzB,SAASC,oBAAoB,CAACC,SAAS,EAAE;EACrC,IAAIC,iBAAiB,GAAGC,SAAS;EACjC,IAAIC,SAAS,GAAGN,QAAQ;EACxB,IAAIO,KAAK,GAAGJ,SAAS,CAAC,CAAC,CAAC;EACxB,MAAMK,SAAS,GAAG,CAACD,KAAK,CAACE,OAAO,CAAC;EACjC,OAAO,CAACF,KAAK,CAACG,IAAI,IAAIJ,SAAS,GAAGL,WAAW,EAAE;IAC3CM,KAAK,GAAGJ,SAAS,CAACG,SAAS,CAAC;IAC5BE,SAAS,CAACG,IAAI,CAACJ,KAAK,CAACG,IAAI,GAAGH,KAAK,CAACK,MAAM,GAAGL,KAAK,CAACE,OAAO,CAAC;IACzD,IAAIL,iBAAiB,KAAKC,SAAS,IAAIE,KAAK,CAACM,gBAAgB,EAAE;MAC3DT,iBAAiB,GAAGE,SAAS;IACjC;IACAA,SAAS,IAAIN,QAAQ;EACzB;EACA,MAAMc,QAAQ,GAAGR,SAAS,GAAGN,QAAQ;EACrC;AACJ;AACA;AACA;EACI,IAAIQ,SAAS,CAACO,MAAM,KAAK,CAAC,EACtBP,SAAS,CAACG,IAAI,CAACJ,KAAK,CAACE,OAAO,CAAC;EACjC,OAAO;IACHD,SAAS;IACTM,QAAQ,EAAEA,QAAQ,GAAG,IAAI;IACzBV,iBAAiB,EAAE,CAACA,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAK,KAAK,CAAC,GAAGA,iBAAiB,GAAGU,QAAQ,IAAI;EACrH,CAAC;AACL;AAEA,SAASZ,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}